{"version":3,"sources":["components/Banner.js","components/Countdown.js","components/Footline.js","components/Logo.js","App.js","serviceWorker.js","index.js"],"names":["Banner","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","react_default","a","createElement","id","className","Component","Countdown","update","_this$props","prefix","targetDate","duration","moment","getTime","Date","asSeconds","clearInterval","intervalId","setState","timeToDisplay","days","hours","minutes","seconds","setInterval","Footline","text","Logo","url","alt","src","FootlineText","logoSrc","App","components_Logo","components_Banner","components_Countdown","components_Footline","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sTAkBeA,qBAdX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,GAFEP,wEAKf,OAAOQ,EAAAC,EAAAC,cAAA,OAAKC,GAAG,UACXH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,oBACXJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,QACfJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,UAAf,cATKC,sCC8CNC,cA5CX,SAAAA,EAAYf,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAW,IACfd,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAa,GAAAR,KAAAH,KAAMJ,KAMVgB,OAAS,WAAM,IAAAC,EACoBhB,EAAKD,MAA5BkB,EADGD,EACHC,OAAQC,EADLF,EACKE,WAEZC,EAAWC,IAAOD,SAASD,EAAWG,WAAY,IAAIC,MAAOD,WAEjE,GAAIF,EAASI,aAAe,EAKxB,OAJAC,cAAcxB,EAAKyB,iBACnBzB,EAAK0B,SAAS,CACVC,cAAe,oBAQvB,IAAMA,EAAgBV,EAAS,KAF/BE,EAAWC,IAAOD,SAASA,EAASI,YAAc,EAAG,YAENK,OAAS,KAAOT,EAASU,QAAU,KAAOV,EAASW,UAAY,KAAOX,EAASY,UAAY,IAE1I/B,EAAK0B,SAAS,CACVC,mBAxBJ3B,EAAKO,MAAQ,CACToB,cAAe,IAHJ3B,mFA+BfG,KAAKsB,WAAaO,YAAY7B,KAAKY,OAAQ,KAC3CZ,KAAKY,0CAGA,IACGY,EAAkBxB,KAAKI,MAAvBoB,cAER,OAAOnB,EAAAC,EAAAC,cAAA,WACHF,EAAAC,EAAAC,cAAA,UAAKiB,WAxCOd,aCcToB,qBAdX,SAAAA,EAAYlC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA8B,IACfjC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgC,GAAA3B,KAAAH,KAAMJ,KACDQ,MAAQ,GAFEP,wEAIV,IACGkC,EAAS/B,KAAKJ,MAAdmC,KACR,OAAO1B,EAAAC,EAAAC,cAAA,OAAKC,GAAG,YACXH,EAAAC,EAAAC,cAAA,YACKwB,WATMrB,cCaRsB,qBAZX,SAAAA,EAAYpC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAgC,IACfnC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAkC,GAAA7B,KAAAH,KAAMJ,KACDQ,MAAQ,GAFEP,wEAIV,IACGoC,EAAQjC,KAAKJ,MAAbqC,IACR,OAAO5B,EAAAC,EAAAC,cAAA,OAAKE,UAAU,QAClBJ,EAAAC,EAAAC,cAAA,OAAK2B,IAAI,OAAOC,IAAKF,YARdvB,cCIbK,EAAa,IAAII,KAAK,uBACtBL,EAAS,sBACTsB,EAAe,sDACfC,EAAU,YAeDC,MAbf,WACE,OACEjC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAACgC,EAAD,CAAMN,IAAKI,IACXhC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,QACRH,EAAAC,EAAAC,cAAA,OAAKC,GAAG,UAAR,KACAH,EAAAC,EAAAC,cAACiC,EAAD,MACAnC,EAAAC,EAAAC,cAACkC,EAAD,CAAW1B,WAAYA,EAAYD,OAAQA,IAC3CT,EAAAC,EAAAC,cAACmC,EAAD,CAAUX,KAAMK,MCRFO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d774946c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport '../styles/Banner.css'\n\nclass Banner extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {}\n    }\n    render() {\n        return <div id=\"banner\">\n            <div className=\"banner-container\">\n                <div className=\"top\"></div>\n                <div className=\"bottom\"> </div>\n            </div>\n        </div>\n    }\n}\n\nexport default Banner;","import React, { Component } from 'react';\nimport '../styles/Countdown.css';\nimport moment from 'moment';\n\nclass Countdown extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            timeToDisplay: ''\n        }\n    }\n\n    update = () => {\n        const { prefix, targetDate } = this.props;\n\n        let duration = moment.duration(targetDate.getTime() - new Date().getTime());\n\n        if (duration.asSeconds() <= 0) {\n            clearInterval(this.intervalId);\n            this.setState({\n                timeToDisplay: \"Countdown Ended\"\n            })\n            return;\n        }\n\n        //Otherwise\n        duration = moment.duration(duration.asSeconds() - 1, 'seconds');\n\n        const timeToDisplay = prefix + \" \" + (duration.days() + 'd:' + duration.hours() + 'h:' + duration.minutes() + 'm:' + duration.seconds() + 's');\n\n        this.setState({\n            timeToDisplay\n        })\n    }\n\n    componentDidMount() {\n        this.intervalId = setInterval(this.update, 1000);\n        this.update();\n    }\n\n    render() {\n        const { timeToDisplay } = this.state;\n\n        return <div>\n            <h3>{timeToDisplay}</h3>\n        </div>\n    }\n}\n\nexport default Countdown;","import React, { Component } from 'react';\nimport '../styles/Footline.css'\n\nclass Footline extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {}\n    }\n    render() {\n        const { text } = this.props;\n        return <div id=\"Footline\">\n            <span>\n                {text}\n            </span>\n        </div>;\n    }\n}\n\nexport default Footline;","import React, { Component } from 'react';\nimport '../styles/Logo.css'\n\nclass Logo extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {}\n    }\n    render() {\n        const { url } = this.props;\n        return <div className=\"logo\">\n            <img alt=\"logo\" src={url}></img>\n        </div>\n    }\n}\n\nexport default Logo;","import React from 'react';\nimport './App.css';\nimport Banner from './components/Banner';\nimport Countdown from './components/Countdown';\nimport Footline from './components/Footline';\nimport Logo from './components/Logo';\n\nconst targetDate = new Date('2019-07-24 23:59:59');\nconst prefix = \"Idea Box Closes In:\"\nconst FootlineText = 'Exciting Prizes to be won for the Most Popular Idea'\nconst logoSrc = \"/logo.jpg\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Logo url={logoSrc}></Logo>\n      <div id=\"top\"></div>\n      <div id=\"bottom\"> </div>\n      <Banner></Banner>\n      <Countdown targetDate={targetDate} prefix={prefix}></Countdown>\n      <Footline text={FootlineText}></Footline>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}